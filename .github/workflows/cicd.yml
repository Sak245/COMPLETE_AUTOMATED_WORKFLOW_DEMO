# Name of the GitHub Actions workflow
name: CI/CD for Dockerised Flask App

# Trigger workflow on push or pull request to main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # First job: build the app and run tests
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run test suite
      - name: Run tests
        run: pytest

  # Second job: Build and publish Docker image (runs only if tests pass)
  build-and-publish:
    needs: build-and-test  # This job depends on the successful completion of the previous one
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code again for Docker build
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for advanced Docker builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub using GitHub Secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image to DockerHub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Use root of repository as Docker build context
          push: true  # Push the image to DockerHub
          tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest  # Docker image tag

      # Step 5: Confirm the image was pushed
      - name: Image digest
        run: echo 'Image pushed: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest'
