# Name of the workflow
name: CI/CD for Dockerised Flask App

# Triggers the workflow on push or pull request to the main branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # Job 1: Build and test the Flask app
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # Specify Python version

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests using pytest
      - name: Run tests
        run: pytest

  # Job 2: Build and push Docker image (runs only if build-and-test succeeds)
  build-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx (for advanced build features)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to DockerHub using GitHub secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and push Docker image to DockerHub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .  # Build context (root of the repo)
          push: true  # Push to DockerHub after building
          tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest  # Image tag

      # Step 5: Confirm the image was pushed successfully
      - name: Image digest
        run: echo "Image pushed: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest"
