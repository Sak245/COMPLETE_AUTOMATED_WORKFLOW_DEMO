# Name of the GitHub Actions workflow
name: CI/CD for Dockerised Flask App

# Trigger the workflow on push or pull request to the 'main' branch
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# First Job: Build and test the Python Flask application
jobs:
  build-and-test:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python 3.10
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install Python dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests using pytest
      - name: Run tests
        run: pytest

  # Second Job: Build and publish Docker image to DockerHub
  build-and-publish:
    # This job will only run after the build-and-test job completes successfully
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code again
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (advanced Docker builder)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Log in to Docker Hub using GitHub Secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Your DockerHub username stored securely
          password: ${{ secrets.DOCKER_PASSWORD }}  # Your DockerHub password stored securely

      # Step 4: Build and push Docker image to DockerHub
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .                                # Use the root of the repo as Docker build context
          push: true                                # Push the image after building
          tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest  # Docker image tag

      # Step 5: Print confirmation message after image is pushed
      - name: Image digest
        run: echo "Image pushed: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest"
